"""
Sub3_complex_rule Module

This module is responsible for processing and evaluating complex rules based on
provided context data. It defines a custom exception for rule violations and
a data context class to encapsulate context data. It also integrates with a
database handler and a system shutdown mechanism.

Summary of Primary Laws (Conceptual):
This module operates under the conceptual framework of primary directives, which
are akin to fundamental laws or rules that govern the behavior of a system or
application. These directives are complex and require detailed evaluation
based on various context data. The module provides a mechanism to check these
complex rules and handle violations appropriately.

Classes:
    RuleViolationError: Exception raised when a rule violation is detected.
    DataContext: Represents the context data for rule evaluation.
    sub3_complex_rule: Handles complex rule processing and evaluation.

Functions:
    process_rule(context_data, request_id, alertmanager_url=None): Processes and
        evaluates complex rules.
"""

import logging

from sub_system import shutdown

class RuleViolationError(Exception):
    """
    Exception raised when a rule violation is detected.

    This exception is used to signal that the provided context data violates
    one or more complex rules being evaluated.
    """
    pass

class DataContext:
    """
    Represents the context data for rule evaluation.

    This class encapsulates the context data used in the evaluation of complex
    rules. It provides a structured way to access and manage this data.

    Attributes:
        context_data (dict): A dictionary containing the context data.
    """

    def __init__(self, context_data):
        """
        Initializes the DataContext with the provided context data.

        Args:
            context_data (dict): A dictionary containing the context data.
        """
        self.context_data = context_data

class sub3_complex_rule:
    """
    Handles complex rule processing and evaluation.

    This class is responsible for evaluating complex rules based on the provided
    context data. It uses a rule check function, a shutdown function, and a
    database handler to process rules and handle violations.

    Attributes:
        rule_check_function (function): Function to check complex rules.
        shutdown_function (function): Function to handle shutdown procedures.
        database_handler (object): Object to interact with the database.
    """

    def __init__(self, rule_check_function, shutdown_function, database_handler):
        """
        Initializes the complex rule handler.

        Args:
            rule_check_function (function): Function to check complex rules.
            shutdown_function (function): Function to handle shutdown procedures.
            database_handler (object): Object to interact with the database.
        """
        self.rule_check_function = rule_check_function
        self.shutdown_function = shutdown_function
        self.database_handler = database_handler

    def process_rule(self, context_data, request_id, alertmanager_url=None):
        """
        Processes and evaluates complex rules based on the provided context data.

        This function creates a DataContext object, evaluates the rules using the
        rule check function, and handles rule violations or errors.

        Args:
            context_data (dict): Data used for rule evaluation.
            request_id (str): Identifier for the request.
            alertmanager_url (str, optional): URL for Alertmanager notifications. Defaults to None.

        Returns:
            dict: Results of rule processing.

        Raises:
            RuleViolationError: If a rule violation is detected.
        """
        try:
            context = DataContext(context_data)
            if self.rule_check_function(context, request_id):
                logging.info(f"Rules passed for request: {request_id}")
                return {"rule_passed": True}
            else:
                logging.warning(f"Rule violation detected for request: {request_id}")
                raise RuleViolationError("Rule violation detected.")
        except RuleViolationError as e:
            logging.error(f"Rule violation error for request {request_id}: {e}")
            return {"rule_violation": True}
        except Exception as e:
            logging.error(f"Error processing rule for request {request_id}: {e}")
            self.shutdown_function(f"Rule processing error: {e}", alertmanager_url, severity="error", grouping_key="rule_processing")
            return {"error": "Internal rule processing error"}
