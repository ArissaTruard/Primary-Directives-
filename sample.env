# .env file for Primary Directives Application and Sub-Modules

# ------------------------------------------------------------------------------
# Primary Directives Application Configuration
# ------------------------------------------------------------------------------

# Authorization API URL: Used for validating user tokens.
AUTHORIZATION_API_URL=http://localhost:8080/auth

# Authorization API Token: Token for authenticating requests to the authorization API.
AUTHORIZATION_API_TOKEN=your_token

# Machine Learning Model Name: Name of the ML model to load.
MODEL_NAME=t5-small

# Model Cache Directory: Directory to cache the ML model.
MODEL_CACHE_DIR=./model_cache

# Model Checksum: SHA-256 checksum of the ML model for integrity verification.
MODEL_CHECKSUM=example_checksum

# Summary Model Name: Name of the model used for generating summaries.
SUMMARY_MODEL=facebook/bart-large

# Log File Path: Path to the application log file.
LOG_FILE=app.log

# Law Summary Database Path: Path to the SQLite database for law summaries and corrections.
LAW_SUMMARY_DB_PATH=law_summary.db

# Database Update URL: URL for updating the law database (if applicable).
DATABASE_UPDATE_URL=http://localhost:8081/laws

# Database Update Token: Token for updating the law database (if applicable).
DATABASE_UPDATE_TOKEN=database_token

# Alertmanager URL: URL for sending alerts to Alertmanager (optional).
ALERTMANAGER_URL=http://localhost:9093/api/v1/alerts

# Flask Host: Host that the Flask application will bind to.
FLASK_HOST=0.0.0.0

# Flask Port: Port that the Flask application will bind to.
FLASK_PORT=8000

# Flask Debug Mode: Set to 'True' for development, 'False' for production.
FLASK_DEBUG=False

# Location API URL: URL of the location API (if integrated).
LOCATION_API_URL=http://localhost:8082/location

# Location API Token: Token for the location API (if integrated).
LOCATION_API_TOKEN=location_token

# ------------------------------------------------------------------------------
# Sub-Module Specific Configurations (if applicable)
# ------------------------------------------------------------------------------

# sub_rate_limit: Maximum number of calls allowed within a time window.
RATE_LIMIT_MAX_CALLS=10

# sub_rate_limit: Time window in seconds for rate limiting.
RATE_LIMIT_PER_SECONDS=60

# sub_periodic_task: Interval in seconds for periodic tasks.
PERIODIC_TASK_INTERVAL=30

# Retry and Circuit Breaker: Maximum number of retry attempts.
RETRY_MAX_RETRIES=3

# Retry and Circuit Breaker: Delay in seconds between retries.
RETRY_DELAY=1

# Retry and Circuit Breaker: Timeout in seconds for retries.
RETRY_TIMEOUT=5

# Retry and Circuit Breaker (Backoff): Initial delay in seconds.
RETRY_BACKOFF_BASE_DELAY=1

# Retry and Circuit Breaker (Backoff): Maximum delay in seconds.
RETRY_BACKOFF_MAX_DELAY=60

# Retry and Circuit Breaker (Backoff): Enable jitter for delays (True/False).
RETRY_BACKOFF_JITTER=True

# Circuit Breaker: Number of failures to open the circuit.
CIRCUIT_BREAKER_FAILURE_THRESHOLD=5

# Circuit Breaker: Timeout in seconds to transition to HALF_OPEN state.
CIRCUIT_BREAKER_RECOVERY_TIMEOUT=30

# Thread Pool: Number of threads in the pool.
THREAD_POOL_NUM_THREADS=5

# Task Queue: Maximum size of the task queue.
TASK_QUEUE_MAX_SIZE=100

Comprehensive Documentation:
 * Primary Directives Application Configuration:
   * This section contains the main settings for the application, including API endpoints, model details, database paths, and logging configurations.
   * Each variable is documented with its purpose and an example value.
 * Sub-Module Specific Configurations:
   * This section includes settings that are specific to individual sub-modules.
   * For example, it contains settings for rate limiting, periodic tasks, retry logic, and thread/task management.
   * Each variable is clearly documented to explain its function and how it affects the behavior of the corresponding sub-module.
 * Clarity and Organization:
   * The file is organized into logical sections to improve readability.
   * Comments are used extensively to explain the purpose of each variable.
   * Example values are provided to demonstrate the expected format.
 * Completeness:
   * The .env file includes settings for all relevant aspects of the application and its sub-modules.
   * It covers configurations related to API endpoints, database connections, logging, model loading, and various utility functions.
 * Maintainability:
   * The documentation is designed to be easily updated as the application evolves.
   * Clear and concise descriptions make it easy for developers to understand and modify the settings.
